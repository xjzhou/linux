#!/bin/bash

#http://blog.hawkhost.com/2010/07/02/tmux-â€“-the-terminal-multiplexer-part-2
#tmux new-session -d -s hawkhost
# 
#tmux new-window -t hawkhost:1 -n 'Server1' 'ssh root@10.x.x.x'
#tmux new-window -t hawkhost:2 -n 'Server2' 'ssh root@10.x.x.x'
#tmux new-window -t hawkhost:3 -n 'Server3' 'ssh root@10.x.x.x'
#tmux new-window -t hawkhost:4 -n 'Server4' 'ssh root@10.x.x.x'
#tmux new-window -t hawkhost:5 -n 'Server5' 'ssh root@10.x.x.x'
# 
#tmux select-window -t hawkhost:1
#tmux -2 attach-session -t hawkhost


#
# Modified TMUX start script from:
#     http://forums.gentoo.org/viewtopic-t-836006-start-0.html
#
# Store it to `~/bin/tmx` and issue `chmod +x`.
#


#
#   Multiple Clients Sharing One Session
#   
#   Screen and tmux's behaviour for when multiple clients are attached to one session differs slightly. 
#   In Screen, each client can be connected to the session but view different windows within it, but 
#   in tmux, all clients connected to one session must view the same window.
#   
#   This problem can be solved in tmux by spawning two separate sessions and synchronizing the second 
#   one to the windows of the first. This is accomplished by first issuing a new session:
#   
#   tmux new -s <base session>
#   Then pointing a second new session to the first:
#   
#   tmux new-session -t <base session> -s <new session>
#   However, this usage of tmux results in the problem that detaching from these mirrored sessions will 
#   start to litter your system with defunct sessions which can only be cleaned up with some pretty 
#   extreme micromanagement. I wrote a script to solve this problem, call it tmx and use it simply with tmx 
#   <base session name>.
#   
#
# Works because bash automatically trims by assigning to variables and by 
# passing arguments
trim() { echo $1; }

tmux='tmux -2'

if [[ -z "$1" ]]; then
    echo "Specify session name as the first argument"
    exit
fi

# Only because I often issue `ls` to this script by accident
if [[ "$1" == "ls" ]]; then
    tmux ls
    exit
fi

base_session="$1"
# This actually works without the trim() on all systems except OSX
tmux_nb=$(trim `tmux ls | grep "^$base_session" | wc -l`)
if [[ "$tmux_nb" == "0" ]]; then
    echo "Launching tmux base session $base_session ..."
    tmux new-session -s $base_session
else
    # Make sure we are not already in a tmux session
    if [[ -z "$TMUX" ]]; then
        # Kill defunct sessions first
        old_sessions=$(tmux ls 2>/dev/null | egrep "^[0-9]{14}.*[0-9]+\)$" | cut -f 1 -d:)
        for old_session_id in $old_sessions; do
            tmux kill-session -t $old_session_id
        done

        echo "Launching copy of base session $base_session ..."
        # Session is is date and time to prevent conflict
        session_id=`date +%Y%m%d%H%M%S`
        # Create a new session (without attaching it) and link to base session 
        # to share windows
        tmux new-session -d -t $base_session -s $session_id
        # Create a new window in that session
        #tmux new-window
        # Attach to the new session
        tmux attach-session -t $session_id
        # When we detach from it, kill the session
        tmux kill-session -t $session_id
    fi
fi 
